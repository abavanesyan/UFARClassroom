@page "/submissions"
@inject HttpClient Http
@using UFAR.Classroom.Entities
@using System.Net.Http.Json
@using System.Net.Http.Headers
@rendermode InteractiveServer

<div class="container mt-5">
    <!-- Title -->
    <h3 class="text-center text-primary mb-4">
        <i class="bi bi-journal-text"></i> Assignments Manager
    </h3>

    <!-- Add Assignment Button -->
    <div class="text-center mb-4">
        <button class="btn btn-success btn-lg shadow" @onclick="ToggleAddAssignmentForm">
            <i class="bi bi-plus-circle"></i> Add New Assignment
        </button>
    </div>

    <!-- Add Assignment Form -->
    @if (showAddForm)
    {
        <div class="card border-success shadow-lg mb-4">
            <div class="card-header bg-success text-white">
                <h4 class="card-title text-center">Add New Assignment</h4>
            </div>
            <div class="card-body">
                <EditForm Model="newAssignment" OnValidSubmit="HandleAddAssignment">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="title" class="form-label fw-bold">Title:</label>
                        <InputText id="title" class="form-control border-success" @bind-Value="newAssignment.Title" />
                    </div>

                    <div class="mb-3">
                        <label for="dueDate" class="form-label fw-bold">Due Date:</label>
                        <InputDate id="dueDate" class="form-control border-success" @bind-Value="newAssignment.DueDate" />
                    </div>

                    <div class="mb-3">
                        <label for="task" class="form-label fw-bold">Task:</label>
                        <InputText id="task" class="form-control border-success" @bind-Value="newAssignment.Task" />
                    </div>

                    <div class="text-center">
                        <button type="submit" class="btn btn-primary btn-lg">
                            Save Assignment <i class="bi bi-check-circle"></i>
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    <!-- File Upload Section -->
    <div class="card shadow-sm p-4 mb-5">
        <div class="card-body">
            <h5 class="text-center text-info mb-3">
                <i class="bi bi-cloud-upload"></i> Upload File
            </h5>
            <div class="text-center">
                <InputFile OnChange="HandleFileSelected" class="form-control w-50 d-inline-block mb-3" />
                <button class="btn btn-primary" @onclick="UploadFile" disabled="@isUploading">
                    <i class="bi bi-upload"></i> Upload
                </button>
            </div>
            @if (isUploading)
            {
                <div class="text-center mt-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Uploading...</span>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Assignments List -->
    @if (assignments != null && assignments.Count > 0)
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover table-bordered shadow-sm">
                <thead class="table-primary">
                    <tr>
                        <th>Title</th>
                        <th>Due Date</th>
                        <th>Task</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var assignment in assignments)
                    {
                        <tr>
                            <td class="fw-bold">@assignment.Title</td>
                            <td>@assignment.DueDate.ToShortDateString()</td>
                            <td>@assignment.Task</td>
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteAssignment(assignment.Id)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info text-center shadow-sm mt-4" role="alert">
            <i class="bi bi-info-circle"></i> No assignments available. Add a new assignment to get started!
        </div>
    }
</div>

@code {
    private List<Assignment> assignments;
    private bool showAddForm = false;
    private Assignment newAssignment = new Assignment();
    private IBrowserFile selectedFile;
    private bool isUploading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAssignments();
    }

    private async Task LoadAssignments()
    {
        assignments = await Http.GetFromJsonAsync<List<Assignment>>("https://localhost:7118/api/Assignment");
    }

    private void ToggleAddAssignmentForm()
    {
        showAddForm = !showAddForm;
    }

    private async Task HandleAddAssignment()
    {
        var response = await Http.PostAsJsonAsync("https://localhost:7118/api/Assignment", newAssignment);

        if (response.IsSuccessStatusCode)
        {
            var createdAssignment = await response.Content.ReadFromJsonAsync<Assignment>();
            assignments.Add(createdAssignment);
            newAssignment = new Assignment();
            showAddForm = false;
        }
        else
        {
            Console.WriteLine("Failed to add assignment");
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task UploadFile()
    {
        if (selectedFile == null)
            return;

        isUploading = true;

        var content = new MultipartFormDataContent();
        var fileContent = new StreamContent(selectedFile.OpenReadStream());
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
        content.Add(fileContent, "file", selectedFile.Name);

        var response = await Http.PostAsync("https://localhost:7118/api/Submission/upload", content);

        if (response.IsSuccessStatusCode)
        {
            var fileUrl = await response.Content.ReadAsStringAsync();
            Console.WriteLine("File uploaded successfully: " + fileUrl);
        }
        else
        {
            Console.WriteLine("Failed to upload file");
        }

        isUploading = false;
    }

    private async Task DeleteAssignment(int id)
    {
        var response = await Http.DeleteAsync($"https://localhost:7118/api/Assignment/{id}");

        if (response.IsSuccessStatusCode)
        {
            var assignmentToRemove = assignments.FirstOrDefault(a => a.Id == id);
            if (assignmentToRemove != null)
            {
                assignments.Remove(assignmentToRemove);
            }
        }
        else
        {
            Console.WriteLine("Failed to delete assignment");
        }
    }
}
